import edu.wpi.first.toolchain.*

buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    //Check for the latest version here: http://plugins.gradle.org/plugin/com.jfrog.artifactory
    classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4+"
  }
}

plugins {
  id 'cpp'
  id 'java'
  id 'edu.wpi.first.wpilib.repositories.WPILibRepositoriesPlugin' version '2020.2'
  id 'edu.wpi.first.NativeUtils' version  '2020.7.2' //'2019.5.15' //'2020.1.0'
  id 'edu.wpi.first.GradleJni' version '0.10.1'
  id 'edu.wpi.first.GradleVsCode' version '0.12.0'
}


allprojects {
  apply plugin: "com.jfrog.artifactory"
}

java {
  sourceCompatibility = JavaVersion.VERSION_11
  targetCompatibility = JavaVersion.VERSION_11
}


def nativeName = "wpilibStateSpace"

ext {
  baseId = nativeName
  groupId = "edu.wpi.first.${nativeName}"
}

ext.getCurrentArch = {
  return NativePlatforms.desktop
}

repositories {
  mavenCentral()
}

if (project.hasProperty('releaseMode')) {
  wpilibRepositories.addAllReleaseRepositories(project)
} else {
  wpilibRepositories.addAllDevelopmentRepositories(project)
}

// Apply C++ configuration
apply from: 'config.gradle'

// Apply Java configuration
dependencies {
  // implementation 'edu.wpi.first.ntcore:ntcore-java:2020.+'
  // implementation 'edu.wpi.first.wpilibj:wpilibj-java:2020.+'
  // implementation 'edu.wpi.first.wpilibc:wpilibc-cpp:2020.+'
  // implementation 'edu.wpi.first.wpiutil:wpiutil-java:2020.+'
  // implementation 'edu.wpi.first.wpiutil:wpiutil-cpp:2020.+'
  // implementation 'edu.wpi.first.hal:hal-java:2020.+'
  implementation 'edu.wpi.first.ntcore:ntcore-java:2020.2.2'
  implementation 'edu.wpi.first.wpilibj:wpilibj-java:2020.2.2'
  implementation 'edu.wpi.first.wpilibc:wpilibc-cpp:2020.2.2'
  implementation 'edu.wpi.first.wpiutil:wpiutil-java:2020.2.2'
  implementation 'edu.wpi.first.wpiutil:wpiutil-cpp:2020.2.2'
  implementation 'edu.wpi.first.hal:hal-java:2020.2.2'

  implementation "org.ejml:ejml-simple:0.38"
  implementation "com.fasterxml.jackson.core:jackson-annotations:2.10.0"
  implementation "com.fasterxml.jackson.core:jackson-core:2.10.0"
  implementation "com.fasterxml.jackson.core:jackson-databind:2.10.0"

  testImplementation('junit:junit:4.13')
  testCompile "org.knowm.xchart:xchart:3.2.2"
}

// Set up exports properly
nativeUtils {
  exportsConfigs {
    // Main library is just default empty. This will export everything
    WPILibStateSpace {
    }
    WPILibStateSpaceDriver {

    }
  }
  privateExportsConfigs {
    // Only export explicit symbols from driver library
//    WPILibStateSpaceDriver {
//      exportsFile = project.file("src/main/driver/symbols.txt")
//    }
  }
}

model {
  components {
    WPILibStateSpace(NativeLibrarySpec) {
      sources {
        cpp {
          source {
            srcDirs 'src/main/native/cpp'
            include '**/*.cpp'
          }
          exportedHeaders {
            srcDirs 'src/main/native/include'
          }
        }
      }
      binaries.all {
        lib library: 'WPILibStateSpaceDriver', linkage: 'shared'
      }
      nativeUtils.useRequiredLibrary(it, 'wpilib_shared')
    }

    WPILibStateSpaceDriver(JniNativeLibrarySpec) {
      enableCheckTask true
      javaCompileTasks << compileJava
      jniCrossCompileOptions << JniCrossCompileOptions(nativeUtils.wpi.platforms.roborio)
      // Leave these for future proofing
      jniCrossCompileOptions << JniCrossCompileOptions(nativeUtils.wpi.platforms.raspbian)
      jniCrossCompileOptions << JniCrossCompileOptions(nativeUtils.wpi.platforms.aarch64bionic)
      sources {
        cpp {
          source {
            srcDirs 'src/main/driver/cpp'
            include '**/*.cpp'
          }
          exportedHeaders {
            srcDirs 'src/main/driver/include'
          }
        }
      }

      nativeUtils.useRequiredLibrary(it, "driver_shared")
    }

    // By default, a development executable will be generated. This is to help the case of
    // testing specific functionality of the library.
    WPILibStateSpaceDev(NativeExecutableSpec) {
      targetBuildTypes 'debug'
      sources {
        cpp {
          source {
            srcDirs 'src/dev/native/cpp'
            include '**/*.cpp'
          }
          exportedHeaders {
            srcDir 'src/main/native/include'
            if (project.hasProperty('generatedHeaders')) {
              srcDir generatedHeaders
            }
          }
        }
      }
      binaries.all {
        lib library: 'WPILibStateSpace', linkage: 'shared'
        lib library: 'WPILibStateSpaceDriver', linkage: 'shared'

        nativeUtils.useRequiredLibrary(it, "wpilib_executable_shared")
      }
    }
  }

  tasks {
    def c = $.components
    project.tasks.create('runCpp', Exec) {
      group = 'WPILib'
      description = "Run the WPILibStateSpaceDev executable"
      def found = false
      def systemArch = getCurrentArch()
      c.each {
        println it
        println it.name
        if (it in NativeExecutableSpec && it.name == "WPILibStateSpaceDev") {
          it.binaries.each {
            if (!found) {
              def arch = it.targetPlatform.name
              if (arch == systemArch) {
                dependsOn it.tasks.install
                commandLine it.tasks.install.runScriptFile.get().asFile.toString()
                def filePath = it.tasks.install.installDirectory.get().toString() + File.separatorChar + 'lib'
                test.dependsOn it.tasks.install
                test.systemProperty 'java.library.path', filePath
                test.environment 'LD_LIBRARY_PATH', filePath
                test.workingDir filePath

                found = true
              }
            }
          }
        }
      }
    }
  }

  binaries {
    all {
      if (toolChain in VisualCpp) {
        cppCompiler.args '/bigobj'
      }
    }
  }
}

apply from: 'publish.gradle'

wrapper {
  gradleVersion '6.0'
}
